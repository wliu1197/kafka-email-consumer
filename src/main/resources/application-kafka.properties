spring.application.name=emailNotificationMicroservice
server.port=8082
spring.kafka.consumer.bootstrap-servers=localhost:9092
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
#spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer

##############################
# This ErrorHandleingDeserializer will catch deserializer exception
# Allow consumer to continue consume next message if deserialization failed
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.ErrorHandlingDeserializer
spring.kafka.consumer.properties.spring.deserializer.value.delegate.class=org.springframework.kafka.support.serializer.JsonDeserializer
##############################

#All consumer microservices has same group id
#will work as a group to handler related messages
spring.kafka.consumer.group-id=product-created-events-group
#We can specify trusted package for deserialization e.g: package of ProductCreatedEvent
#for now we use * to trust all event message deserialization
spring.kafka.consumer.properties.spring.json.trusted.packages=*
#This mapping is for serialization and deserialization format in token:className
#When producer send message it would use same token name map with producer's className for serialization
#When consumer consume message it would use same token name map with consumer's className for deserialization
#spring.kafka.consumer.properties.spring.json.type.mapping=productcreatedevent:com.kafka.ms.email.event.ProductCreatedEvent